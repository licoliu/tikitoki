$import("assets.js.core.utils.AJKHelpers");
Class.forName({
	name : "class assets.js.launcher.TLUCAppsFilter extends Object",
	"@Getter @Setter private controller" : null,
	"@Getter @Setter private initialised" : false,
	TLUCAppsFilter : function(data) {
		this.controller = data.controller;
	},
	init : function() {
		this.prepareForView();
		return this;
	},
	updateView : function() {
		var self = this;
		if (!self.initialised) {
			return;
		}
		self.showAllTypes();
		self.flushTimelineCategories();
		// $(self.domCarousel).removeClass("tl-ccl-denser");
		$(self.domList).empty();
		self.initialised = false;
		if (self.controller.isActiveBlock({
			block : self
		})) {
			self.prepareForView();
		}
	},
	initialise : function() {
		var self = this;
		self.activeCounter = 0;

		self.domRoot = $("#tl-uc-view-apps-block").get()[0];
		// self.domCarousel = $(self.domRoot).find(".ajk-cs-carousel").get()[0];
		self.domList = $(self.domRoot).find(".tl-colour-checkbox-list").get()[0];
		self.mainController = theTLMainController;
		self.timeline = self.mainController.timeline;

		self.categories = [ {
			title : "net",
			key : "0",
			colour : "37474f"
		}, {
			title : "webresource",
			key : "1",
			colour : "37474f"
		} ];
		if (self.categories.length > 0 && !(self.categories.length == 1 && self.categories[0].autoGenerated == true)) {
			self.generateCheckboxes();
		} else {
			$(self.domList).remove();
			self.showEmptyMessage();
		}
		$(self.domList).unbind("click").click(function(e) {
			var domItem = assets.js.core.utils.AJKHelpers.getSelfOrFirstParantOfClass({
				domEl : e.target,
				className : "tl-ccl-item"
			});
			if (domItem) {

				var iKey = $(domItem).attr("key");
				if (iKey == "show-all") {
					self.activeCounter = 0;
					self.showAllCategories();
					self.flushTimelineCategories();
				} else {
					if (self.categories[iKey].active) {
						self.categories[iKey].active = false;
						self.activeCounter--;
					} else {
						self.categories[iKey].active = true;
						self.activeCounter++;
					}

					self.updateCheckboxes();

					if (self.activeCounter == self.categories.length) {
						$(self.domShowAll).addClass("selected").removeClass("inactive");
					} else if (self.activeCounter == 0) {
						self.showAllCategories();
					} else {
						$(self.domShowAll).removeClass("selected").addClass("inactive");
					}
					self.flushTimelineCategories();
				}
			}
		});
		// self.contentScroller = new AJKContentScrollerController({
		// domRootEl : self.domCarousel
		// }).init();
		self.initialised = true;
	},
	showAllCategories : function() {
		var self = this;
		// TODO
		$(self.domList).find("li").removeClass("inactive").addClass("selected");
		$(self.domShowAll).addClass("selected");
		$.each(self.categories, function() {
			this.active = false;
			this.hide = false;
		});
		self.activeCounter = 0;
	},
	flushTimelineCategories : function() {
	},
	prepareForView : function() {
		var self = this;
		if (!self.initialised) {
			self.initialise();
		}
		// setTimeout(function() {
		// self.contentScroller.reset();
		// self.contentScroller.resetSize();
		// }, 1);
	},
	generateCheckboxes : function() {
		var self = this;
		var iHTML = "";
		var showAllText = (self.controller.trans) ? self.controller.trans.showAll : "全选";
		iHTML += '<li key="show-all" class="tl-ccl-item selected"><span style="background-color: #000"></span><p>' + showAllText + '</p></li>';
		$.each(self.categories, function() {
			iHTML += '<li key="' + this.key + '" class="tl-ccl-item selected"><span style="background-color: #' + this.colour + '"></span><p>'
					+ assets.js.core.utils.AJKHelpers.clipToMaxCharWords({
						aString : this.title,
						maxChars : 16
					}) + '</p></li>';
		});
		$(self.domList).empty().append(iHTML);
		self.domShowAll = $(self.domList).find("li:eq(0)").get()[0];
		self.domItemsByKey = [];
		$(self.domList).find("li").each(function() {
			self.domItemsByKey[$(this).attr("key")] = this;
		});
	},
	updateCheckboxes : function() {
		var self = this;
		$.each(self.categories, function() {
			var domItem = self.domItemsByKey[this.key];
			if (this.active) {
				$(domItem).addClass("selected").removeClass("inactive");
			} else {
				$(domItem).removeClass("selected").addClass("inactive");
			}
		});
	},
	showEmptyMessage : function() {
		var self = this;
		$(self.domRoot).append('<p class="message">app types filtering has been disabled for this timeline because it does not include any app types for filtering.</p>');
	},
	viewHasEnded : function() {
		var self = this;
	}

});